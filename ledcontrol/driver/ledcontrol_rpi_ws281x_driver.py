# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ledcontrol_rpi_ws281x_driver
else:
    import _ledcontrol_rpi_ws281x_driver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


WS2811_TARGET_FREQ = _ledcontrol_rpi_ws281x_driver.WS2811_TARGET_FREQ
SK6812_STRIP_RGBW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_RGBW
SK6812_STRIP_RBGW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_RBGW
SK6812_STRIP_GRBW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_GRBW
SK6812_STRIP_GBRW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_GBRW
SK6812_STRIP_BRGW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_BRGW
SK6812_STRIP_BGRW = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP_BGRW
SK6812_SHIFT_WMASK = _ledcontrol_rpi_ws281x_driver.SK6812_SHIFT_WMASK
WS2811_STRIP_RGB = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_RGB
WS2811_STRIP_RBG = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_RBG
WS2811_STRIP_GRB = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_GRB
WS2811_STRIP_GBR = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_GBR
WS2811_STRIP_BRG = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_BRG
WS2811_STRIP_BGR = _ledcontrol_rpi_ws281x_driver.WS2811_STRIP_BGR
WS2812_STRIP = _ledcontrol_rpi_ws281x_driver.WS2812_STRIP
SK6812_STRIP = _ledcontrol_rpi_ws281x_driver.SK6812_STRIP
SK6812W_STRIP = _ledcontrol_rpi_ws281x_driver.SK6812W_STRIP
class ws2811_channel_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gpionum = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gpionum_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gpionum_set)
    invert = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_invert_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_invert_set)
    count = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_count_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_count_set)
    strip_type = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_strip_type_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_strip_type_set)
    leds = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_leds_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_leds_set)
    brightness = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_brightness_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_brightness_set)
    wshift = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_wshift_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_wshift_set)
    rshift = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_rshift_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_rshift_set)
    gshift = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gshift_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gshift_set)
    bshift = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_bshift_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_bshift_set)
    gamma = property(_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gamma_get, _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_gamma_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.ws2811_channel_t_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_ws2811_channel_t())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_ws2811_channel_t

# Register ws2811_channel_t in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.ws2811_channel_t_swigregister(ws2811_channel_t)

class ws2811_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    render_wait_time = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_render_wait_time_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_render_wait_time_set)
    device = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_device_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_device_set)
    rpi_hw = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_rpi_hw_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_rpi_hw_set)
    freq = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_freq_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_freq_set)
    dmanum = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_dmanum_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_dmanum_set)
    channel = property(_ledcontrol_rpi_ws281x_driver.ws2811_t_channel_get, _ledcontrol_rpi_ws281x_driver.ws2811_t_channel_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.ws2811_t_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_ws2811_t())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_ws2811_t

# Register ws2811_t in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.ws2811_t_swigregister(ws2811_t)

WS2811_SUCCESS = _ledcontrol_rpi_ws281x_driver.WS2811_SUCCESS
WS2811_ERROR_GENERIC = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_GENERIC
WS2811_ERROR_OUT_OF_MEMORY = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_OUT_OF_MEMORY
WS2811_ERROR_HW_NOT_SUPPORTED = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_HW_NOT_SUPPORTED
WS2811_ERROR_MEM_LOCK = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_MEM_LOCK
WS2811_ERROR_MMAP = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_MMAP
WS2811_ERROR_MAP_REGISTERS = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_MAP_REGISTERS
WS2811_ERROR_GPIO_INIT = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_GPIO_INIT
WS2811_ERROR_PWM_SETUP = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_PWM_SETUP
WS2811_ERROR_MAILBOX_DEVICE = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_MAILBOX_DEVICE
WS2811_ERROR_DMA = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_DMA
WS2811_ERROR_ILLEGAL_GPIO = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_ILLEGAL_GPIO
WS2811_ERROR_PCM_SETUP = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_PCM_SETUP
WS2811_ERROR_SPI_SETUP = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_SPI_SETUP
WS2811_ERROR_SPI_TRANSFER = _ledcontrol_rpi_ws281x_driver.WS2811_ERROR_SPI_TRANSFER
WS2811_RETURN_STATE_COUNT = _ledcontrol_rpi_ws281x_driver.WS2811_RETURN_STATE_COUNT

def ws2811_init(ws2811):
    return _ledcontrol_rpi_ws281x_driver.ws2811_init(ws2811)

def ws2811_fini(ws2811):
    return _ledcontrol_rpi_ws281x_driver.ws2811_fini(ws2811)

def ws2811_render(ws2811):
    return _ledcontrol_rpi_ws281x_driver.ws2811_render(ws2811)

def ws2811_wait(ws2811):
    return _ledcontrol_rpi_ws281x_driver.ws2811_wait(ws2811)

def ws2811_get_return_t_str(state):
    return _ledcontrol_rpi_ws281x_driver.ws2811_get_return_t_str(state)

def ws2811_set_custom_gamma_factor(ws2811, gamma_factor):
    return _ledcontrol_rpi_ws281x_driver.ws2811_set_custom_gamma_factor(ws2811, gamma_factor)
class color_hsv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hue = property(_ledcontrol_rpi_ws281x_driver.color_hsv_hue_get, _ledcontrol_rpi_ws281x_driver.color_hsv_hue_set)
    h = property(_ledcontrol_rpi_ws281x_driver.color_hsv_h_get, _ledcontrol_rpi_ws281x_driver.color_hsv_h_set)
    saturation = property(_ledcontrol_rpi_ws281x_driver.color_hsv_saturation_get, _ledcontrol_rpi_ws281x_driver.color_hsv_saturation_set)
    sat = property(_ledcontrol_rpi_ws281x_driver.color_hsv_sat_get, _ledcontrol_rpi_ws281x_driver.color_hsv_sat_set)
    s = property(_ledcontrol_rpi_ws281x_driver.color_hsv_s_get, _ledcontrol_rpi_ws281x_driver.color_hsv_s_set)
    value = property(_ledcontrol_rpi_ws281x_driver.color_hsv_value_get, _ledcontrol_rpi_ws281x_driver.color_hsv_value_set)
    val = property(_ledcontrol_rpi_ws281x_driver.color_hsv_val_get, _ledcontrol_rpi_ws281x_driver.color_hsv_val_set)
    v = property(_ledcontrol_rpi_ws281x_driver.color_hsv_v_get, _ledcontrol_rpi_ws281x_driver.color_hsv_v_set)
    raw = property(_ledcontrol_rpi_ws281x_driver.color_hsv_raw_get, _ledcontrol_rpi_ws281x_driver.color_hsv_raw_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.color_hsv_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_color_hsv())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_color_hsv

# Register color_hsv in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.color_hsv_swigregister(color_hsv)

class color_hsv_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hue = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_hue_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_hue_set)
    h = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_h_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_h_set)
    saturation = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_saturation_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_saturation_set)
    sat = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_sat_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_sat_set)
    s = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_s_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_s_set)
    value = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_value_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_value_set)
    val = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_val_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_val_set)
    v = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_v_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_v_set)
    raw = property(_ledcontrol_rpi_ws281x_driver.color_hsv_float_raw_get, _ledcontrol_rpi_ws281x_driver.color_hsv_float_raw_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.color_hsv_float_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_color_hsv_float())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_color_hsv_float

# Register color_hsv_float in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.color_hsv_float_swigregister(color_hsv_float)

class color_rgb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    red = property(_ledcontrol_rpi_ws281x_driver.color_rgb_red_get, _ledcontrol_rpi_ws281x_driver.color_rgb_red_set)
    r = property(_ledcontrol_rpi_ws281x_driver.color_rgb_r_get, _ledcontrol_rpi_ws281x_driver.color_rgb_r_set)
    green = property(_ledcontrol_rpi_ws281x_driver.color_rgb_green_get, _ledcontrol_rpi_ws281x_driver.color_rgb_green_set)
    g = property(_ledcontrol_rpi_ws281x_driver.color_rgb_g_get, _ledcontrol_rpi_ws281x_driver.color_rgb_g_set)
    blue = property(_ledcontrol_rpi_ws281x_driver.color_rgb_blue_get, _ledcontrol_rpi_ws281x_driver.color_rgb_blue_set)
    b = property(_ledcontrol_rpi_ws281x_driver.color_rgb_b_get, _ledcontrol_rpi_ws281x_driver.color_rgb_b_set)
    raw = property(_ledcontrol_rpi_ws281x_driver.color_rgb_raw_get, _ledcontrol_rpi_ws281x_driver.color_rgb_raw_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.color_rgb_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_color_rgb())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_color_rgb

# Register color_rgb in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.color_rgb_swigregister(color_rgb)

class color_rgb_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    red = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_red_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_red_set)
    r = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_r_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_r_set)
    green = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_green_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_green_set)
    g = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_g_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_g_set)
    blue = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_blue_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_blue_set)
    b = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_b_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_b_set)
    raw = property(_ledcontrol_rpi_ws281x_driver.color_rgb_float_raw_get, _ledcontrol_rpi_ws281x_driver.color_rgb_float_raw_set)

    def __init__(self):
        _ledcontrol_rpi_ws281x_driver.color_rgb_float_swiginit(self, _ledcontrol_rpi_ws281x_driver.new_color_rgb_float())
    __swig_destroy__ = _ledcontrol_rpi_ws281x_driver.delete_color_rgb_float

# Register color_rgb_float in _ledcontrol_rpi_ws281x_driver:
_ledcontrol_rpi_ws281x_driver.color_rgb_float_swigregister(color_rgb_float)


def ws2811_channel_get(ws, channelnum):
    return _ledcontrol_rpi_ws281x_driver.ws2811_channel_get(ws, channelnum)

def ws2811_led_get(channel, lednum):
    return _ledcontrol_rpi_ws281x_driver.ws2811_led_get(channel, lednum)

def ws2811_led_set(channel, lednum, color):
    return _ledcontrol_rpi_ws281x_driver.ws2811_led_set(channel, lednum, color)

def unpack_rgb(_in):
    return _ledcontrol_rpi_ws281x_driver.unpack_rgb(_in)

def pack_rgbw(r, g, b, w):
    return _ledcontrol_rpi_ws281x_driver.pack_rgbw(r, g, b, w)

def scale_8(a, b):
    return _ledcontrol_rpi_ws281x_driver.scale_8(a, b)

def clamp(d, min, max):
    return _ledcontrol_rpi_ws281x_driver.clamp(d, min, max)

def blackbody_to_rgb(kelvin):
    return _ledcontrol_rpi_ws281x_driver.blackbody_to_rgb(kelvin)

def blackbody_correction_rgb(rgb, kelvin):
    return _ledcontrol_rpi_ws281x_driver.blackbody_correction_rgb(rgb, kelvin)

def render_hsv2rgb_rainbow_float(hsv, corr_rgb, saturation, brightness, gamma, has_white):
    return _ledcontrol_rpi_ws281x_driver.render_hsv2rgb_rainbow_float(hsv, corr_rgb, saturation, brightness, gamma, has_white)

def render_rgb_float(rgb, corr_rgb, saturation, brightness, gamma, has_white):
    return _ledcontrol_rpi_ws281x_driver.render_rgb_float(rgb, corr_rgb, saturation, brightness, gamma, has_white)

def ws2811_hsv_render_array_float(ws, channel, values, count, correction, saturation, brightness, gamma, has_white):
    return _ledcontrol_rpi_ws281x_driver.ws2811_hsv_render_array_float(ws, channel, values, count, correction, saturation, brightness, gamma, has_white)

def ws2811_rgb_render_array_float(ws, channel, values, count, correction, saturation, brightness, gamma, has_white):
    return _ledcontrol_rpi_ws281x_driver.ws2811_rgb_render_array_float(ws, channel, values, count, correction, saturation, brightness, gamma, has_white)

def float_to_int_1000(t):
    return _ledcontrol_rpi_ws281x_driver.float_to_int_1000(t)

def float_to_int_1000_mirror(t):
    return _ledcontrol_rpi_ws281x_driver.float_to_int_1000_mirror(t)

def wave_pulse(t, duty_cycle):
    return _ledcontrol_rpi_ws281x_driver.wave_pulse(t, duty_cycle)

def wave_triangle(t):
    return _ledcontrol_rpi_ws281x_driver.wave_triangle(t)

def wave_sine(t):
    return _ledcontrol_rpi_ws281x_driver.wave_sine(t)

def wave_cubic(t):
    return _ledcontrol_rpi_ws281x_driver.wave_cubic(t)

def plasma_sines(x, y, t, coeff_x, coeff_y, coeff_x_y, coeff_dist_xy):
    return _ledcontrol_rpi_ws281x_driver.plasma_sines(x, y, t, coeff_x, coeff_y, coeff_x_y, coeff_dist_xy)

def plasma_sines_octave(x, y, t, octaves, lacunarity, persistence):
    return _ledcontrol_rpi_ws281x_driver.plasma_sines_octave(x, y, t, octaves, lacunarity, persistence)

def fade(t):
    return _ledcontrol_rpi_ws281x_driver.fade(t)

def lerp(t, a, b):
    return _ledcontrol_rpi_ws281x_driver.lerp(t, a, b)

def grad(hash, x, y, z):
    return _ledcontrol_rpi_ws281x_driver.grad(hash, x, y, z)

def perlin_noise_3d(x, y, z):
    return _ledcontrol_rpi_ws281x_driver.perlin_noise_3d(x, y, z)

def fbm_noise_3d(x, y, z, octaves, lacunarity, persistence):
    return _ledcontrol_rpi_ws281x_driver.fbm_noise_3d(x, y, z, octaves, lacunarity, persistence)

cvar = _ledcontrol_rpi_ws281x_driver.cvar
debug = cvar.debug

